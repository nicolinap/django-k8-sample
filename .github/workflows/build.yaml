name: Deployment CI/CD

on:
  pull_request:

jobs:
  django_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    env:
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      MYSQL_DB: ${{ secrets.MYSQL_DB }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
    services:
      mysql_main:
        image: mysql:oracle
        env:
          DJANGO_SECRET_KEY: ${{ env.DJANGO_SECRET_KEY }}
          MYSQL_DB: ${{ env.MYSQL_DB }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_HOST: ${{ env.MYSQL_HOST }}
          MYSQL_PORT: ${{ env.MYSQL_PORT }}
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}

        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Tests
        run: |
          python manage.py test
  build:
    runs-on: ubuntu-latest
    needs: [django_test]
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Login to OCIR 
        run: echo ${{ secrets.OCIR_PASS }} | docker login -u ${{ secrets.OCIR_LOGIN }} --password-stdin lhr.ocir.io
      - name: Build Container Image
        working-directory: ./web
        env: 
          DJANGO_SUPERUSER_USERNAME: ${{ secrets.DJANGO_SUPERUSER_USERNAME }}
          DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
          DJANGO_SUPERUSER_EMAIL: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

          MYSQL_READY: ${{ secrets.MYSQL_READY }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}

          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          touch .env
          echo DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }} >> .env
          echo DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }} >> .env
          echo DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }} >> .env
          echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
          
          echo MYSQL_READY=${{ secrets.MYSQL_READY }} >> .env
          echo MYSQL_DB=${{ secrets.MYSQL_DB }} >> .env
          echo MYSQL_USER=${{ secrets.MYSQL_USER }} >> .env
          echo MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} >> .env
          echo MYSQL_HOST=${{ secrets.MYSQL_HOST }} >> .env
          echo MYSQL_PORT=${{ secrets.MYSQL_PORT }} >> .env
          echo MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} >> .env

          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env

          sudo apt-get install qemu binfmt-support qemu-user-static

          docker buildx build --platform linux/arm64 -f Dockerfile -t lhr.ocir.io/idhkis4m3p5e/django-sample-app-k8s:latest .
          docker buildx build --platform linux/arm64 -f Dockerfile -t lhr.ocir.io/idhkis4m3p5e/django-sample-app-k8s:${GITHUB_SHA::7}-${GITHUB_RUN_ID::5} .

      - name: Push image
        run: |
          docker push lhr.ocir.io/idhkis4m3p5e/django-sample-app-k8s:latest
          docker push lhr.ocir.io/idhkis4m3p5e/django-sample-app-k8s:${GITHUB_SHA::7}-${GITHUB_RUN_ID::5}

      - name: Install OCI CLI
        run: |
          mkdir -p ~/.oci
          mkdir -p ~/.ssh
          echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
          echo "${{ secrets.OCI_KEY_FILE }}" > ~/.oci/key.pem

          echo "${{ secrets.OCI_KEY_FILE }}"  >> $GITHUB_PATH
          echo "${{ secrets.OCI_CONFIG }}"  >> $GITHUB_PATH
          
          mkdir -p ~/oci_cli/bin
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          
          echo "/home/runner/bin" >> "/home/runner/oci_cli/bin/oci-cli-scripts"
          echo "/home/runner/bin" >> $GITHUB_PATH
          
          exec -l $SHELL

      - name: Install kubectl
        run: |
          oci -v

          oci setup repair-file-permissions --file ~/.oci/config
          oci setup repair-file-permissions --file ~/.oci/key.pem

          mkdir -p ~/.kube/
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mv ./kubectl /usr/local/bin

          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

      - name: Rollout Deployment
        run: |
          echo "${{ secrets.ID_RSA }}" > ~/.ssh/id_rsa
          echo "${{ secrets.ID_RSA_PUB }}" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa.pub

          export SESSION_ID=$( oci bastion session create-port-forwarding --bastion-id "ocid1.bastion.oc1.uk-london-1.amaaaaaatwfhi7yan2s3sdth7yjcw4hpa3o32uebmrlideeocv5xl2lajknq" --display-name activetunnel --ssh-public-key-file ~/.ssh/id_rsa.pub --key-type PUB --target-private-ip 10.0.1.224 --target-port 6443  | jq '.data.id')
          SESSION_ID=`sed -e 's/^"//' -e 's/"$//' <<<"$SESSION_ID"`
          echo $SESSION_ID

          ssh-keyscan -H host.bastion.uk-london-1.oci.oraclecloud.com >> ~/.ssh/known_hosts
          
          sleep 30s
          ssh -fN -i ~/.ssh/id_rsa -L 6443:10.0.1.224:6443 $SESSION_ID@host.bastion.uk-london-1.oci.oraclecloud.com
          kubectl version

          kubectl set image deployment/django-k8s-web-deployment django-k8s-web=lhr.ocir.io/idhkis4m3p5e/django-sample-app-k8s:${GITHUB_SHA::7}-${GITHUB_RUN_ID::5}
          
          kubectl get deployments

          kubectl rollout restart deployment/django-k8s-web-deployment
          kubectl rollout status deployment/django-k8s-web-deployment

          sleep 1m
          export SINGLE_POD_NAME=$(kubectl get pod -l app=django-k8s-web-deployment -o jsonpath="{.items[1].metadata.name}")
          kubectl wait --for=condition=ready pod/$SINGLE_POD_NAME --timeout=90s
          
          kubectl exec -it $SINGLE_POD_NAME -- sh /app/migrate.sh
          kubectl exec -it $SINGLE_POD_NAME -- sh /app/collectstatic.sh

          kubectl get pods

          oci bastion session delete --session-id $SESSION_ID --force